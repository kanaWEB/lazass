## LAZASS LIBRARY ##
###############################################################
## Description: Library for scripts                           #
## Author:Sarrailh Remi                                       #
## License:http://www.tldrlegal.com/l/Gplv3                   #
## Manual:http://madnerd.org/Create_Scripts_with_Lazass       #
###############################################################
VER="2"
AUTHOR="Sarrailh Remi"
LICENSE="Gplv3"

OK="\\033[1;32m"
NORMAL="\\033[0;39m"
ERR="\\033[1;31m"
INFO="\\033[1;34m"
WARN="\\033[1;33m"
PICOLOR="\\033[1;35m"
## VARIABLES ##

##############
## DISPLAY   #
##############

# HEADER #

# Create a description box, Use it to describe your SCRIPT
description() {
	echo -ne $WARN 
	echo "LAZASS INSTALL $VER by $AUTHOR - $LICENSE"
	echo "__________________________________"
	echo "__________________________________"
	echo "$1"
	echo "__________________________________"
	echo "__________________________________"
	echo -ne $NORMAL
}

# Create a messagebox, Use it to describe an ACTION
messagebox() { 
echo -e $INFO"____________________________________"
echo $1
line_break
}

# Create an error box to show an CRITICAL ERROR
#$1 : TEXT/ERROR CODE
error_box() {
	echo -ne $ERR
	echo "--- ERROR CODE: $1 ---"
	echo -ne $NORMAL
}

# Create a console box use it to show COMMAND OUTPUT
console() {
	echo -ne $OK
	echo "/////////////////////"
	echo -ne $NORMAL
}

display_gpio() {
	line_break
	echo "5V  5V  GND 15  16  1   GND 4   5   GND 6   10  11 "
    echo "o   o   o   o   o   o   o   o   o   o   o   o   o  "
    echo "o   o   o   o   o   o   o   o   o   o   o   o   o  "
    echo "3V  8   9   7   GND 0   2   3   3V  12  13  14  GND"
    colecho "P1" $OK
    line_break
}

# TEXT #

# Colored text
colecho() {
echo -ne $2
echo $1
echo -ne $NORMAL
}

# Text with no line break
nlbecho() {
echo -ne $2
echo -ne "$1 "
echo -ne $NORMAL
}

# Make a List item with ->
listecho() {
	nlbecho "->" $OK 
	echo $1
}

#Mini Boxes 

ok_minibox() {
	echo -ne " ["
	echo -ne $OK
	echo -ne "OK"
	echo -ne $NORMAL
	echo "]"
}

skip_minibox() {
	echo -ne " ["
	echo -ne $INFO
	echo -ne "SKIPPED"
	echo -ne $NORMAL
	echo "]"
}

warning_minibox() {
	echo -ne " ["
	echo -ne $WARN
	echo -ne "WARNING"
	echo -ne $NORMAL
	echo "]"
}

error_minibox() {
	echo -ne " ["
	echo -ne $ERR
	echo -ne "ERROR"
	echo -ne $NORMAL
	echo "]"
}

#Line Break

jumpline() {
	echo ""
}

line_break() {
	echo -e $INFO"____________________________________"
	echo -e $NORMAL
}

##!!!! thank() : Thanks message, use it at the END OF SCRIPT
thank () {
	if [[ $noreset != 1 ]]
	then
	echo ""
	echo -ne $INFO
	echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
	echo "Have fun and Happy Hacking !"
	echo "----------------------------"
	echo -ne $NORMAL
	exit 0
	fi
}

##############
## DATAS     #
##############

#Verify if you have root permissions
verify_root() {
	if [ $(id -u) -ne 0 ]; then
		error_box
		echo "Script must be run as root."
		echo "Try 'sudo $0'"
		echo -ne $NORMAL
		error_box
		echo -ne $NORMAL
		exit 1
	fi
}

#Return First IP
firstip() {
nlbecho $(hostname -I |cut -f1 -d' ') $RED
}

#Return List all ip
ip_list() {
nlbecho $(hostname -I) $RED
}

#Return List Samba name and if it failed show first ip
smb_getname() {
	if [[ -f /etc/samba/smb.conf ]]
	then
		smbname=$(cat /etc/samba/smb.conf |grep "netbios name = ")
		if [[ $? == 0 ]]
			then	
			echo $smbname|sed 's/netbios name = //'
			else
			firstip
		fi
	else
	firstip
	fi
}

#Ping a website and tell if you are (it is) online or not
#$1: address to ping
ping_test() {
	messagebox "INTERNET CONNECTIVITY"
	console
	ping -c1 $1 && internet=1 || internet=0
	console
	if [[ $internet == 1 ]]
	then
	echo -ne "INTERNET"
	ok_minibox
	else
	echo -ne "INTERNET"
	error_minibox
	echo -ne $ERR
	echo "NO INTERNET CONNECTIVITY DETECTED SCRIPT STOPPED"
	echo -ne $NORMAL
	exit 1
	fi
}

##########################
## STRING MANIPULATION   #
##########################

#Erase from string to string
#$1: File to read
#$2: First String
#$3: Last String
erasefromto() {
	cat $1|sed -e "/$2/,/$3/d"
}

##Erase string
#$1: File to read
#$2: String
erasestring() {
	cat $1|sed "s/$2//"
}

#Extract text from file
#$1: File to read
#$2: First String
#$3: Last String
extractfromto() {
	sed -n "/^$2\(\)/,/^$3/p" $1
}

#Extract a function from a bash script
#$1: File to read
#$2: Function name
extractfunction() {
sed -n "/^$2()\(\)/,/^}/p" $1
}

#Search a string in file
#$1: File to read
#$2: String to search
#return $found: 0:true 1:false
searchstring() {
	found=""
	cat $1 |grep -q $2
	found=$?
	if [ $found == 0 ]
		then
		listecho "$2 founded"
	fi
}

##############
## ACTIONS   #
##############

#Launch a script insides LAZASS
launchscript() {
	export noreset=1
	"scripts/$1"
	error_launchscript=$?
	if [[ $error_launchscript != 0 ]]
		then
		error_box $error_launchscript
		echo "Cannot launch scripts/$1"
		error_box $error_launchscript
		exit 0
	fi
}

#Update APT
updater() {
	ping_test "google.com"
	messagebox "Update Package"
	console
	apt-get update
	aptget_error $?
	console
}

#Install a packet (with error handling)
#$1 package (apt-get install package)
installer() {
	messagebox "INSTALL: $1"
	dpkg -s "$1"|grep "Status: install ok installed" > /dev/null 2>&1
#IS THE PACKAGE ALREADY INSTALLED ?
	if [[ $? == 1 ]]
		then
		console
		apt-get install "$1"
		aptget_error $?
		console
		dpkg -s "$1"|grep "Status: install ok installed" > /dev/null 2>&1
#WAS THE PACKAGE INSTALLED ?
		if [[ $? == 0 ]]
		then
			echo -ne "RESULT: $1"
			ok_minibox
		else
			echo -ne "RESULT: $1"
			error_minibox
			read
		fi
	else
		echo -ne "RESULT: $1"
		skip_minibox
	fi
}

#Restart a service
#$1 servive (as in /etc/init.d)
restarter() {
	messagebox "Restarting $1"
	console
	service $1 restart
	console
}

#create_dir() : Make a directory (recursively)
#$1 Name of the directory 
createdir() {
messagebox "Create directory $1"
if [ -d "$directory" ]
then
nlbecho "CREATE DIRECTORY $directory"
skip_minibox
else
mkdir -p $1
	if [[ $? == 0 ]]
		then
		nlbecho "CREATE DIRECTORY"
		ok_minibox
		else
		error_box $?
		echo "CANNOT CREATE DIRECTORY"
		error_box " "
		exit 0
	fi
fi
}

#Git Cloner
#$1 Program name (for showing it)
#$2 Repo url (ex: http://github.com/nameofuser/nameofrepo)
#$3 Name of the directory where the repo will be cloned
#If the directory exists try to update it
gitcloner() {
messagebox "Clone $1"
console
git clone $2 $3
giterror=$?
console
if [[ $giterror == 128 ]]
	then
	nlbecho "ALREADY CLONED"
	skip_minibox
	messagebox "Update $1"
	cd $3
	git pull
	cd $path_lazass
fi
}

##############
## PROMPT    #
##############

#Ask if the user want to continue the script
continue_prompt() {
	read -r -p "Continue? [Y/n] " response
			case $response in
				[yY])
				echo "Resuming..."
				;;
				*)
				echo ""
				colecho "Installation stopped" $info
				echo -ne $NORMAL
				exit 0
				;;
			esac
}

#Prompt to create a directory
createdir_prompt() {
read -r -p "Path [ex:/home/pi/]: " directory
jumpline
nlbecho "This will create"
colecho "$directory" $ERR
read -r -p "CONFIRM [Y/n/a] [Yes/No/Abort] : " confirmation
case $confirmation in
				[yY])
				createdir $directory
				;;
				[aA])
				error_box 1
				echo "INSTALLATION ABORTED"
				error_box 1
				exit 0
				;;
				*)
				jumpline
				createdir_prompt
				;;
esac
}

#Prompt to create a backup of a file
#$1 File to backup
backup_prompt(){
colecho "THIS WILL OVERWRITE $1 !" $ERR
colecho "(A backup will be made at $1.backup.TIMESTAMP)" $WARN
continue_prompt
TIMESTAMP=$(date +%y%m%d)'_'$(date +%H%M%S)
cp $1 $1'.backup.'$TIMESTAMP
}

#################
## DEPENDANCIES #
#################

#Handle APT error (launched when using installer)
aptget_error() {
	apterror=$1
	case $apterror in 
		100)
			echo -ne $ERR
			echo "" 
			error_box $apterror
			echo "DPKG SEEMS TO BE LOCKED !"
			echo "DID YOU LAUNCH ANOTHER INSTALL ?"
			echo "IF NOT YOU CAN UNLOCK DPKG"
			error_box $apterror
			read -r -p "Unlock it? [Y/n] " response
			case $response in
				[yY])
				echo "RESTARTING INSTALLING..." 
				rm /var/lib/dpkg/lock
				rm /var/lib/apt/lists/* -vf
				$0
				;;
				*)
				echo ""
				error_box $apterror
				echo "INSTALLATION FAILED!!!"
				echo "You should fixed APT-GET MANUALLY BEFORE RETRY"
				error_box $apterror
				exit 0
				;;
			esac
		;;
		0)
		echo "OK"
		;;

		1)
		error_box $apterror
		echo "Installation Aborted !"
		error_box $apterror
		echo -ne $NORMAL
		exit 0
		;;
			
		*)
			error_box $apterror
			echo "UNKNOWN APT-GET ERROR!!!"
			echo "Please send me your error message/code at maditnerd@gmail.com"
			read -r -p "Stop Installation ? [Y/n]" response
			error_box $apterror
			echo -ne $NORMAL
				case $response in
					[yY])
					exit 0
					;;
				esac
		;;
		esac
		
}


#################
## MENU         #
#################

# Generate Main Menu #
mainmenu() {
ping_test google.com

#Custom Menu
menu_options[ 0 ]="scripts"

menu_options[ 1 ]=" ---> Others scripts"
i=2
#LOAD SCRIPTS in /scripts

while read line
do
    file_item=$line
    description_item=$(cat "$path_lazass/scripts/$script_dir/$line" |grep "#DESCRIPTION_LAZASS:")
    if [ $? -eq 1 ]
        then
        menu_options[ $i ]="$file_item"
        (( i++ ))
        menu_options[ $i ]=""    
    else
        menu_options[ $i ]="$file_item"
        (( i++ ))
        description_item="$(echo $description_item|cut -d':' -f2)"
        menu_options[ $i ]="$description_item"
        fi
     (( i++ ))  
done < <(cd $path_lazass/scripts/$script_dir;ls -d */*;cd ..)

response=$(whiptail --backtitle "$AUTHOR - $LICENSE - $script_dir" --title "LAZASS MENU $VER" --menu "$script_dir" 0 0 0 "${menu_options[@]}"  3>&1 1>&2 2>&3)

if [[ "$response" != "" ]]
	then
"$path_lazass/scripts/$script_dir/$response"
else
	colecho "Exiting Menu" $INFO
	exit 0
fi
}

##!!!! scripts_menu : Generate a List of scripts
scriptsmenu() {
	i=0
	while read line
	do
		scripts_item=$line
	menu_options[ $i ]=$(echo "$scripts_item"|sed s,/,,)
	(( i++ ))
	menu_options[ $i ]="   "$(cat scripts/$scripts_item/README.md)
	(( i++ ))  
done < <(cd scripts;ls -d */;cd ..)

menu_options[ $i ]="BACK"
(( i++ ))
menu_options[ $i ]="   <----"

response=$(whiptail --backtitle "$AUTHOR - $LICENSE - Scripts menu - DOC: smarturl.it/lazass" --title "LAZASS MENU $VER" --menu "Scripts menu" 0 0 0 "${menu_options[@]}"  3>&1 1>&2 2>&3)

case $response in
				"BACK")
				la "$script_dir"
				exit 0
				;;
				"")
				colecho "Exiting Menu" $INFO
				exit 0
				;;
				*)
				la "$response"
				;;
esac
}

# Generate a Configuration Menu #
#$1 configuration repo in lazass/conf/
#$2 configuration file to modify 
confmenu() {
	conf_dir=$1
	conf_origin=$2
	while read line
do
    file_item=$line
    description_item=$(cat "$path_lazass/conf/$conf_dir/$line" |grep "#DESCRIPTION_CONF:")
    if [ $? -eq 1 ]
        then
        menu_options[ $i ]="$file_item"
        (( i++ ))
        menu_options[ $i ]=""    
    else
        menu_options[ $i ]="$file_item"
        (( i++ ))
        description_item="$(echo $description_item|cut -d':' -f2)"
        menu_options[ $i ]="$description_item"
        fi
     (( i++ ))  
done < <(ls $path_lazass/conf/$conf_dir)

menu_options[ $i ]="backup"
(( i++ ))
menu_options[ $i ]=" Backup current configuration"
(( i++ ))
menu_options[ $i ]="BACK"
(( i++ ))
menu_options[ $i ]="   <----"

conf_file=$(whiptail --backtitle "$AUTHOR - $LICENSE - CONFIGURATION $conf_dir - DOC: smarturl.it/lazass" --title "LAZASS MENU $VER" --menu "CONFIGURATION $conf_dir - DOC: smarturl.it/lazass" 0 0 0 "${menu_options[@]}"  3>&1 1>&2 2>&3)

case $conf_file in
				"BACK")
				la "$script_dir"
				exit 0
				;;
				"")
				colecho "Exiting Menu" $INFO
				exit 0
				;;
				"backup")
				messagebox "Backup your current configuration"
				cat /etc/samba/smb.conf
				read -r -p "Name of backup: " conf_file
				colecho "Backup to $path_lazass/conf/$conf_dir/$conf_file ?"
				continue_prompt
				messagebox "Copy backup"
				cp $conf_origin $path_lazass/conf/$conf_dir/$conf_file

				
				;;
				*)
				messagebox "Modify Configuration with $response"
				console
				cat $path_lazass/conf/$conf_dir/$conf_file
				jumpline
				console
				jumpline
				messagebox "Backup"
				backup_prompt $conf_origin
				messagebox "Copy file"
				cp $path_lazass/conf/$conf_dir/$conf_file $conf_origin
				restarter $conf_dir
				colecho "Would you like to customize smb.conf ?" $INFO
				continue_prompt
				nano $conf_origin
				restarter $conf_dir
				;;
esac
}